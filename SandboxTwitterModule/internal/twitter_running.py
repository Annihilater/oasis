# File: SandboxTwitterModule/internal/twitter_running.py
import asyncio
import random



def 

    async def run(self):
        # 异步启动所有智能体的活动
        tasks = [self.run_agent(agent) for _, agent in self.AgentsGraph.graph.nodes(data='agent')]
        await asyncio.gather(*tasks)

    def update_signal(self, new_signal):
        self.signal = new_signal
        print("Signal updated to:", self.signal)

    async def run_agent(self, agent):
        # 确保每个智能体都有一个对应的 TwitterAccount
        user = self.infra.TwiDB.get_user_by_username(agent.name)
        if not user:
            user_id = self.infra.TwiDB.insert_user(
                username=agent.name, 
                name=agent.name, 
                description='Automated agent', 
                created_at=time.strftime("%Y-%m-%d %H:%M:%S"), 
                child_or_adult='adult', 
                password='securepassword'
            )
            print(f'User {agent.name} registered with ID {user_id}.')
        else:
            user_id = user[0]  # Assuming user[0] is the user_id
            print(f'User {agent.name} already exists with ID {user_id}.')

        # 模拟智能体的活动
        await self.perform_agent_activities(agent, user_id)

    async def perform_agent_activities(self, agent, user_id):
        # 假设智能体执行一些活动
        # 发帖
        tweet_content = f"Hello from agent {agent.name}"
        tweet_datetime = time.strftime("%Y-%m-%d %H:%M:%S")
        tweet_id = self.infra.TwiDB.insert_tweet(user_id, tweet_content, tweet_datetime)
        print(f'Tweet posted by {agent.name}: "{tweet_content}"')

        # 随机点赞其他推文
        all_tweets = self.infra.TwiDB.get_all_tweets()
        if all_tweets:
            tweet_to_like = random.choice(all_tweets)
            self.infra.TwiDB.add_tweet_like(tweet_to_like[0])  # Assuming tweet_id is at position 0
            print(f'{agent.name} liked tweet ID {tweet_to_like[0]}')

        # 发表评论
        if all_tweets:
            tweet_to_comment = random.choice(all_tweets)
            comment_content = f"Nice tweet, {agent.name}!"
            self.infra.TwiDB.add_comment_to_tweet(tweet_to_comment[0], user_id, comment_content)
            print(f'{agent.name} commented on tweet ID {tweet_to_comment[0]}: "{comment_content}"')






'''

import asyncio
import random

        # 注册 TwitterAccount
        if not self.infra.TwiDB.get_user_by_username(agent.name):
            user_id = self.infra.TwiDB.insert_user(agent.name, agent.name, "Generated by SandboxTwitter", "2024-04-16", "adult", "password123")
            print(f"为 Agent {agent_id} 创建了新的 TwitterAccount: {user_id}")
        else:
            user_id = self.infra.TwiDB.get_user_by_username(agent.name)['id']

        # 模拟登录
        account = TwitterAccount(user_id, agent.name, "password123")
        print(f"Agent {agent_id} 登录到 TwitterAccount {account.username}")

        # 模拟发送推文
        tweet = account.post_tweet("Hello from agent!", "2024-04-16")
        self.infra.TwiDB.insert_tweet(user_id, tweet['content'], "2024-04-16")
        print(f"Agent {agent_id} 发送了推文: {tweet['content']}")

    def update_signal(self, new_signal):
        self.signal = new_signal
        print(f"-----[st_signal:]Signal updated to: {self.signal}")





    async def run(self):
        # 异步执行每个 agent 的初始化和登录
        tasks = [self.handle_agent(agent) for agent in self.AgentsGraph.graph.nodes(data=True)]
        await asyncio.gather(*tasks)
        print("所有 agent 的处理已完成。")
        # 启动定期任务和实时事件监听
        await asyncio.gather(
            self.perform_periodic_tasks(),
            self.listen_for_real_time_events()
        )

    async def handle_agent(self, node_data):
        agent_id, agent_info = node_data
        agent = agent_info['agent']
        
        # 随机延迟以模拟现实世界操作
        await asyncio.sleep(random.uniform(0.5, 2.0))

        # 模拟用户关系和交互行为
        await self.simulate_user_interactions(agent_id, agent)

    async def simulate_user_interactions(self, agent_id, agent):
        user_id = await self.register_or_get_user(agent)
        account = TwitterAccount(user_id, agent.name, "password123")

        # 模拟关系建立：关注其他用户
        await self.simulate_following(account)

        # 模拟登录和推文
        tweet = account.post_tweet("Exploring the Sandbox Twitter!", "2024-04-16")
        self.infra.TwiDB.insert_tweet(user_id, tweet['content'], "2024-04-16")

        # 模拟评论和转发
        await self.simulate_interactions(account, user_id)

    async def simulate_following(self, account):
        for _ in range(random.randint(1, 5)):  # 随机关注1-5个用户
            target_id = random.choice([u for u in self.AgentsGraph.graph.nodes if u != account.user_id])
            self.infra.TwiDB.update_follow_info(account.user_id, [target_id], [], [], [])

    async def simulate_interactions(self, account, user_id):
        if random.random() < 0.5:
            other_tweet = random.choice(list(self.infra.TwiDB.get_tweets_by_user(user_id)))
            account.comment_tweet({'tweet_id': other_tweet, 'content': "Nice post!", 'datetime': '2024-04-16'})

    async def perform_periodic_tasks(self):
        while True:
            print("Executing periodic tasks...")
            await asyncio.sleep(60)  # Periodic tasks every minute

    async def listen_for_real_time_events(self):
        while True:
            print("Listening for real-time events...")
            await asyncio.sleep(10)  # Check for real-time events every 10 seconds

    def update_signal(self, new_signal):
        self.signal = new_signal
        print(f"-----[st_signal:]Signal updated to: {self.signal}")

    async def register_or_get_user(self, agent):
        if not self.infra.TwiDB.get_user_by_username(agent.name):
            user_id = self.infra.TwiDB.insert_user(agent.name, agent.name, "Generated by SandboxTwitter", "2024-04-16", "adult", "password123")
            print(f"Agent {agent.agent_id} registered new TwitterAccount: {user_id}")
            return user_id
        else:
            return self.infra.TwiDB.get_user_by_username(agent.name)['id']


'''